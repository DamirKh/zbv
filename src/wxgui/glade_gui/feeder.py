#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.2 on Sun May 27 19:15:14 2018
#

import wx
import wx.adv

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class FeederFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: FeederFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((613, 367))
        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        self.bitmap_button_load = wx.BitmapButton(self.panel_1, wx.ID_ANY, wx.Bitmap("/home/damir/PycharmProjects/zbv/src/wxgui/glade_gui/icons/inbox_upload.png", wx.BITMAP_TYPE_ANY), style=wx.BU_AUTODRAW | wx.BU_EXACTFIT)
        self.bitmap_button_save = wx.BitmapButton(self.panel_1, wx.ID_ANY, wx.Bitmap("/home/damir/PycharmProjects/zbv/src/wxgui/glade_gui/icons/inbox_download.png", wx.BITMAP_TYPE_ANY), style=wx.BU_AUTODRAW)
        self.bitmap_button_show = wx.BitmapButton(self.panel_1, wx.ID_ANY, wx.Bitmap("/home/damir/PycharmProjects/zbv/src/wxgui/glade_gui/icons/chart_curve.png", wx.BITMAP_TYPE_ANY), style=wx.BU_AUTODRAW | wx.BU_EXACTFIT)
        self.lbl_dataset_name = wx.StaticText(self.panel_1, wx.ID_ANY, _("Dataset"), style=wx.ALIGN_RIGHT)
        self.panel_2 = wx.Panel(self, wx.ID_ANY)
        self.bitmap_button_open_model = wx.BitmapButton(self.panel_2, wx.ID_ANY, wx.Bitmap("/home/damir/PycharmProjects/zbv/src/wxgui/glade_gui/icons/emotion_surrender.png", wx.BITMAP_TYPE_ANY), style=wx.BU_AUTODRAW | wx.BU_EXACTFIT)
        self.bitmap_button_fit = wx.BitmapButton(self.panel_2, wx.ID_ANY, wx.Bitmap("/home/damir/PycharmProjects/zbv/src/wxgui/glade_gui/icons/emotion_gourmand_big.png", wx.BITMAP_TYPE_ANY), style=wx.BU_AUTODRAW | wx.BU_EXACTFIT)
        self.bitmap_button_predict = wx.BitmapButton(self.panel_2, wx.ID_ANY, wx.Bitmap("/home/damir/PycharmProjects/zbv/src/wxgui/glade_gui/icons/brain.png", wx.BITMAP_TYPE_ANY), style=wx.BU_AUTODRAW)
        self.bitmap_button_save_model = wx.BitmapButton(self.panel_2, wx.ID_ANY, wx.Bitmap("/home/damir/PycharmProjects/zbv/src/wxgui/glade_gui/icons/emotion_doze.png", wx.BITMAP_TYPE_ANY), style=wx.BU_AUTODRAW)
        self.bitmap_button_print = wx.BitmapButton(self.panel_2, wx.ID_ANY, wx.Bitmap("/home/damir/PycharmProjects/zbv/src/wxgui/glade_gui/icons/printer.png", wx.BITMAP_TYPE_ANY), style=wx.BU_AUTODRAW | wx.BU_EXACTFIT)
        self.lbl_model_name = wx.StaticText(self.panel_2, wx.ID_ANY, _("Model"), style=wx.ALIGN_RIGHT)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.on_load_data_btn, self.bitmap_button_load)
        self.Bind(wx.EVT_BUTTON, self.on_save_btn, self.bitmap_button_save)
        self.Bind(wx.EVT_BUTTON, self.on_show_btn, self.bitmap_button_show)
        self.Bind(wx.EVT_BUTTON, self.on_btn_openmodel, self.bitmap_button_open_model)
        self.Bind(wx.EVT_BUTTON, self.on_btn_fit, self.bitmap_button_fit)
        self.Bind(wx.EVT_BUTTON, self.on_btn_predict, self.bitmap_button_predict)
        self.Bind(wx.EVT_BUTTON, self.on_btn_savemodel, self.bitmap_button_save_model)
        self.Bind(wx.EVT_BUTTON, self.on_print_btn, self.bitmap_button_print)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: FeederFrame.__set_properties
        self.SetTitle(_("Feeder"))
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("/home/damir/PycharmProjects/zbv/src/wxgui/glade_gui/icons/emotion_gourmand.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.bitmap_button_load.SetToolTip(_("Load data"))
        self.bitmap_button_load.SetSize(self.bitmap_button_load.GetBestSize())
        self.bitmap_button_save.SetToolTip(_("Model info"))
        self.bitmap_button_save.Enable(False)
        self.bitmap_button_save.SetSize(self.bitmap_button_save.GetBestSize())
        self.bitmap_button_show.SetToolTip(_("Quick show dataset"))
        self.bitmap_button_show.Enable(False)
        self.bitmap_button_show.SetSize(self.bitmap_button_show.GetBestSize())
        self.bitmap_button_open_model.SetToolTip(_("Load model"))
        self.bitmap_button_open_model.SetSize(self.bitmap_button_open_model.GetBestSize())
        self.bitmap_button_fit.SetToolTip(_("Feed and fit"))
        self.bitmap_button_fit.Enable(False)
        self.bitmap_button_fit.SetSize(self.bitmap_button_fit.GetBestSize())
        self.bitmap_button_predict.SetToolTip(_("Use AI for prediction"))
        self.bitmap_button_predict.Enable(False)
        self.bitmap_button_predict.SetSize(self.bitmap_button_predict.GetBestSize())
        self.bitmap_button_save_model.SetToolTip(_("Save model"))
        self.bitmap_button_save_model.Enable(False)
        self.bitmap_button_save_model.SetSize(self.bitmap_button_save_model.GetBestSize())
        self.bitmap_button_print.SetToolTip(_("Do You see this? Thats developer function!"))
        self.bitmap_button_print.SetSize(self.bitmap_button_print.GetBestSize())
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: FeederFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add((0, 0), 0, 0, 0)
        sizer_2.Add(self.bitmap_button_load, 0, 0, 0)
        sizer_2.Add(self.bitmap_button_save, 0, 0, 0)
        sizer_2.Add(self.bitmap_button_show, 0, 0, 0)
        sizer_2.Add((20, 20), 1, wx.EXPAND, 0)
        sizer_2.Add((0, 0), 0, 0, 0)
        sizer_2.Add((0, 0), 0, 0, 0)
        sizer_2.Add(self.lbl_dataset_name, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        self.panel_1.SetSizer(sizer_2)
        sizer_1.Add(self.panel_1, 0, wx.ALL | wx.EXPAND, 2)
        static_line_1 = wx.StaticLine(self, wx.ID_ANY)
        sizer_1.Add(static_line_1, 0, wx.ALL | wx.EXPAND, 5)
        sizer_3.Add((0, 0), 0, 0, 0)
        sizer_3.Add(self.bitmap_button_open_model, 0, 0, 0)
        sizer_3.Add(self.bitmap_button_fit, 0, 0, 0)
        sizer_3.Add(self.bitmap_button_predict, 0, 0, 0)
        sizer_3.Add(self.bitmap_button_save_model, 0, 0, 0)
        sizer_3.Add(self.bitmap_button_print, 0, 0, 0)
        sizer_3.Add((20, 20), 1, wx.EXPAND, 0)
        sizer_3.Add(self.lbl_model_name, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        self.panel_2.SetSizer(sizer_3)
        sizer_1.Add(self.panel_2, 0, wx.ALL | wx.EXPAND, 2)
        static_line_2 = wx.StaticLine(self, wx.ID_ANY)
        sizer_1.Add(static_line_2, 0, wx.ALL | wx.EXPAND, 5)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def on_load_data_btn(self, event):  # wxGlade: FeederFrame.<event_handler>
        print("Event handler 'on_load_data_btn' not implemented!")
        event.Skip()

    def on_save_btn(self, event):  # wxGlade: FeederFrame.<event_handler>
        print("Event handler 'on_save_btn' not implemented!")
        event.Skip()

    def on_show_btn(self, event):  # wxGlade: FeederFrame.<event_handler>
        print("Event handler 'on_show_btn' not implemented!")
        event.Skip()

    def on_btn_openmodel(self, event):  # wxGlade: FeederFrame.<event_handler>
        print("Event handler 'on_btn_openmodel' not implemented!")
        event.Skip()

    def on_btn_fit(self, event):  # wxGlade: FeederFrame.<event_handler>
        print("Event handler 'on_btn_fit' not implemented!")
        event.Skip()

    def on_btn_predict(self, event):  # wxGlade: FeederFrame.<event_handler>
        print("Event handler 'on_btn_predict' not implemented!")
        event.Skip()

    def on_btn_savemodel(self, event):  # wxGlade: FeederFrame.<event_handler>
        print("Event handler 'on_btn_savemodel' not implemented!")
        event.Skip()

    def on_print_btn(self, event):  # wxGlade: FeederFrame.<event_handler>
        print("Event handler 'on_print_btn' not implemented!")
        event.Skip()

# end of class FeederFrame

class MyDialogSelectDateTime(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyDialogSelectDateTime.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE | wx.FULL_REPAINT_ON_RESIZE | wx.RESIZE_BORDER
        wx.Dialog.__init__(self, *args, **kwds)
        self.calendar_ctrl_1 = wx.adv.CalendarCtrl(self, wx.ID_ANY, style=wx.adv.CAL_MONDAY_FIRST)
        self.time_start_selector = wx.adv.TimePickerCtrl(self, wx.ID_ANY)
        self.slider_1 = wx.Slider(self, wx.ID_ANY, 0, 0, 10, style=wx.SL_HORIZONTAL | wx.SL_LEFT | wx.SL_RIGHT)
        self.button_2 = wx.Button(self, wx.ID_CANCEL, "")
        self.button_1 = wx.Button(self, wx.ID_OK, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.adv.EVT_CALENDAR_SEL_CHANGED, self.on_calendar_changed, self.calendar_ctrl_1)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.on_scroll_slider, self.slider_1)
        self.Bind(wx.EVT_BUTTON, self.on_cancel_btn, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.on_ok_button, self.button_1)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyDialogSelectDateTime.__set_properties
        self.SetTitle(_("dialog"))
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("/home/damir/PycharmProjects/zbv/src/wxgui/glade_gui/icons/timeline_marker.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.slider_1.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyDialogSelectDateTime.__do_layout
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(self.calendar_ctrl_1, 2, wx.ALL | wx.EXPAND, 7)
        sizer_4.Add(self.time_start_selector, 0, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 7)
        sizer_4.Add(self.slider_1, 0, wx.ALL | wx.EXPAND, 7)
        sizer_5.Add((20, 20), 1, wx.EXPAND, 0)
        sizer_5.Add(self.button_2, 0, 0, 0)
        sizer_5.Add(self.button_1, 0, 0, 0)
        sizer_4.Add(sizer_5, 1, wx.ALL | wx.EXPAND, 2)
        self.SetSizer(sizer_4)
        sizer_4.Fit(self)
        self.Layout()
        # end wxGlade

    def on_calendar_changed(self, event):  # wxGlade: MyDialogSelectDateTime.<event_handler>
        print("Event handler 'on_calendar_changed' not implemented!")
        event.Skip()

    def on_scroll_slider(self, event):  # wxGlade: MyDialogSelectDateTime.<event_handler>
        print("Event handler 'on_scroll_slider' not implemented!")
        event.Skip()

    def on_cancel_btn(self, event):  # wxGlade: MyDialogSelectDateTime.<event_handler>
        print("Event handler 'on_cancel_btn' not implemented!")
        event.Skip()

    def on_ok_button(self, event):  # wxGlade: MyDialogSelectDateTime.<event_handler>
        print("Event handler 'on_ok_button' not implemented!")
        event.Skip()

# end of class MyDialogSelectDateTime

class Ignore(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Ignore.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((400, 300))
        self.panel_2 = wx.Panel(self, wx.ID_ANY, style=wx.BORDER_SUNKEN)
        self.label_start_from = wx.StaticText(self.panel_2, wx.ID_ANY, _("Start from"))
        self.label_end_on = wx.StaticText(self.panel_2, wx.ID_ANY, _("End on"))
        self.btn_start_select = wx.Button(self.panel_2, wx.ID_ANY, _("Select"), style=wx.BU_AUTODRAW)
        self.btn_stop_select = wx.Button(self.panel_2, wx.ID_ANY, _("Select"), style=wx.BU_AUTODRAW)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.on_btn_start_select, self.btn_start_select)
        self.Bind(wx.EVT_BUTTON, self.on_btn_stop_select, self.btn_stop_select)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: Ignore.__set_properties
        self.SetTitle(_("frame_1"))
        self.btn_start_select.SetToolTip(_("Select START time"))
        self.btn_start_select.Enable(False)
        self.btn_stop_select.SetToolTip(_("Select STOP time"))
        self.btn_stop_select.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: Ignore.__do_layout
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.FlexGridSizer(0, 2, 2, 2)
        grid_sizer_1.Add(self.label_start_from, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.label_end_on, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.btn_start_select, 0, 0, 0)
        grid_sizer_1.Add(self.btn_stop_select, 0, 0, 0)
        self.panel_2.SetSizer(grid_sizer_1)
        sizer_6.Add(self.panel_2, 1, wx.ALL | wx.EXPAND, 5)
        sizer_6.Add((0, 0), 0, 0, 0)
        sizer_6.Add((0, 0), 0, 0, 0)
        sizer_3.Add(sizer_6, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_3)
        self.Layout()
        # end wxGlade

    def on_btn_start_select(self, event):  # wxGlade: Ignore.<event_handler>
        print("Event handler 'on_btn_start_select' not implemented!")
        event.Skip()

    def on_btn_stop_select(self, event):  # wxGlade: Ignore.<event_handler>
        print("Event handler 'on_btn_stop_select' not implemented!")
        event.Skip()

# end of class Ignore

class MyFeederOptionDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFeederOptionDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.panel_3 = wx.Panel(self, wx.ID_ANY)
        self.panel_5 = wx.Panel(self, wx.ID_ANY, style=wx.BORDER_RAISED | wx.FULL_REPAINT_ON_RESIZE)
        self.spin_ctrl_batchsize = wx.SpinCtrl(self.panel_5, wx.ID_ANY, "128", min=1, max=1000)
        self.shuffle_check_btn = wx.CheckBox(self.panel_5, wx.ID_ANY, _("shuffle"), style=wx.CHK_2STATE)
        self.spin_ctrl_epochs = wx.SpinCtrl(self.panel_5, wx.ID_ANY, "1", min=1, max=500)
        self.stopnan_check_btn = wx.CheckBox(self.panel_5, wx.ID_ANY, _("yes"), style=wx.CHK_2STATE)
        self.stoponstag_check_btn = wx.CheckBox(self.panel_5, wx.ID_ANY, _("Stop training if monitored quantity\nhas stopped improving after ... epochs"), style=wx.CHK_2STATE)
        self.spin_ctrl_stag_tollerance = wx.SpinCtrl(self.panel_5, wx.ID_ANY, "3", min=1, max=100, style=wx.ALIGN_RIGHT | wx.SP_ARROW_KEYS)
        self.crossfit_check_btn = wx.CheckBox(self.panel_5, wx.ID_ANY, _("use"), style=wx.CHK_2STATE)
        self.panel_4 = wx.Panel(self, wx.ID_ANY)
        self.hyperlink_1 = wx.adv.HyperlinkCtrl(self.panel_4, wx.ID_ANY, _("?"), _("https://keras.io/preprocessing/sequence/#timeseriesgenerator"))
        self.button_4 = wx.Button(self.panel_4, wx.ID_CANCEL, "")
        self.button_3 = wx.Button(self.panel_4, wx.ID_OK, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHECKBOX, self.on_shuffle_chkbx, self.shuffle_check_btn)
        self.Bind(wx.EVT_SPINCTRL, self.on_spin_ctrl_epochs, self.spin_ctrl_epochs)
        self.Bind(wx.EVT_CHECKBOX, self.on_stop_nan_chkbx, self.stopnan_check_btn)
        self.Bind(wx.EVT_CHECKBOX, self.on_stoponstag_chkbtn, self.stoponstag_check_btn)
        self.Bind(wx.EVT_CHECKBOX, self.on_cross_chkbx, self.crossfit_check_btn)
        self.Bind(wx.EVT_BUTTON, self.on_cancel_btn, self.button_4)
        self.Bind(wx.EVT_BUTTON, self.on_ok_btn, self.button_3)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFeederOptionDialog.__set_properties
        self.SetTitle(_("Feeder option"))
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("/home/damir/PycharmProjects/zbv/src/wxgui/glade_gui/icons/emotion_gourmand.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.stopnan_check_btn.SetToolTip(_("\"Yes\" recomended"))
        self.stopnan_check_btn.SetValue(1)
        self.stoponstag_check_btn.SetToolTip(_("\"Yes\" recomended"))
        self.stoponstag_check_btn.Enable(False)
        self.spin_ctrl_stag_tollerance.Enable(False)
        self.crossfit_check_btn.Enable(False)
        self.crossfit_check_btn.SetValue(1)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFeederOptionDialog.__do_layout
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_2 = wx.FlexGridSizer(7, 3, 5, 5)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        label_1 = wx.StaticText(self.panel_3, wx.ID_ANY, _("Information for feeder."), style=wx.ALIGN_RIGHT)
        sizer_8.Add(label_1, 1, wx.EXPAND, 0)
        self.panel_3.SetSizer(sizer_8)
        sizer_10.Add(self.panel_3, 0, wx.ALL | wx.EXPAND, 5)
        label_2 = wx.StaticText(self.panel_5, wx.ID_ANY, _("Number of timeseries samples in each batch:"), style=wx.ALIGN_RIGHT)
        grid_sizer_2.Add(label_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.LEFT | wx.TOP, 5)
        grid_sizer_2.Add(self.spin_ctrl_batchsize, 0, wx.TOP, 5)
        label_10 = wx.StaticText(self.panel_5, wx.ID_ANY, _("Batch size"), style=wx.ALIGN_LEFT)
        grid_sizer_2.Add(label_10, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 5)
        label_3 = wx.StaticText(self.panel_5, wx.ID_ANY, _("Shuffle samples, or draw them in chronological order:"), style=wx.ALIGN_RIGHT)
        grid_sizer_2.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.LEFT, 5)
        grid_sizer_2.Add(self.shuffle_check_btn, 0, wx.EXPAND, 0)
        grid_sizer_2.Add((0, 0), 0, 0, 0)
        label_4 = wx.StaticText(self.panel_5, wx.ID_ANY, _("Total number of iterations on the data:"), style=wx.ALIGN_RIGHT)
        grid_sizer_2.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.LEFT, 5)
        grid_sizer_2.Add(self.spin_ctrl_epochs, 0, 0, 0)
        label_9 = wx.StaticText(self.panel_5, wx.ID_ANY, _("Epochs"), style=wx.ALIGN_LEFT)
        grid_sizer_2.Add(label_9, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 5)
        grid_sizer_2.Add((0, 0), 0, 0, 0)
        grid_sizer_2.Add((0, 0), 0, 0, 0)
        grid_sizer_2.Add((0, 0), 0, 0, 0)
        label_6 = wx.StaticText(self.panel_5, wx.ID_ANY, _("Terminate training when a NaN loss is encountered?"), style=wx.ALIGN_RIGHT)
        grid_sizer_2.Add(label_6, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.LEFT, 5)
        grid_sizer_2.Add(self.stopnan_check_btn, 0, wx.EXPAND, 0)
        label_8 = wx.StaticText(self.panel_5, wx.ID_ANY, _("TerminateOnNaN"), style=wx.ALIGN_LEFT)
        grid_sizer_2.Add(label_8, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 5)
        grid_sizer_2.Add(self.stoponstag_check_btn, 0, wx.ALIGN_RIGHT, 0)
        grid_sizer_2.Add(self.spin_ctrl_stag_tollerance, 0, wx.TOP, 5)
        label_7 = wx.StaticText(self.panel_5, wx.ID_ANY, _("EarlyStopping"), style=wx.ALIGN_LEFT)
        grid_sizer_2.Add(label_7, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 5)
        label_5 = wx.StaticText(self.panel_5, wx.ID_ANY, _("Use hidden layers for CROSS fit:"), style=wx.ALIGN_RIGHT)
        grid_sizer_2.Add(label_5, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.BOTTOM | wx.TOP, 15)
        grid_sizer_2.Add(self.crossfit_check_btn, 0, wx.EXPAND, 0)
        grid_sizer_2.Add((0, 0), 0, 0, 0)
        self.panel_5.SetSizer(grid_sizer_2)
        grid_sizer_2.AddGrowableCol(1)
        sizer_10.Add(self.panel_5, 1, wx.ALL | wx.EXPAND, 5)
        sizer_9.Add(self.hyperlink_1, 0, 0, 0)
        sizer_9.Add((20, 20), 1, wx.EXPAND, 0)
        sizer_9.Add(self.button_4, 0, 0, 0)
        sizer_9.Add(self.button_3, 0, wx.LEFT, 5)
        self.panel_4.SetSizer(sizer_9)
        sizer_10.Add(self.panel_4, 0, wx.ALL | wx.EXPAND, 5)
        self.SetSizer(sizer_10)
        sizer_10.Fit(self)
        self.Layout()
        self.Centre()
        # end wxGlade

    def on_shuffle_chkbx(self, event):  # wxGlade: MyFeederOptionDialog.<event_handler>
        print("Event handler 'on_shuffle_chkbx' not implemented!")
        event.Skip()

    def on_spin_ctrl_epochs(self, event):  # wxGlade: MyFeederOptionDialog.<event_handler>
        print("Event handler 'on_spin_ctrl_epochs' not implemented!")
        event.Skip()

    def on_stop_nan_chkbx(self, event):  # wxGlade: MyFeederOptionDialog.<event_handler>
        print("Event handler 'on_stop_nan_chkbx' not implemented!")
        event.Skip()

    def on_stoponstag_chkbtn(self, event):  # wxGlade: MyFeederOptionDialog.<event_handler>
        print("Event handler 'on_stoponstag_chkbtn' not implemented!")
        event.Skip()

    def on_cross_chkbx(self, event):  # wxGlade: MyFeederOptionDialog.<event_handler>
        print("Event handler 'on_cross_chkbx' not implemented!")
        event.Skip()

    def on_cancel_btn(self, event):  # wxGlade: MyFeederOptionDialog.<event_handler>
        print("Event handler 'on_cancel_btn' not implemented!")
        event.Skip()

    def on_ok_btn(self, event):  # wxGlade: MyFeederOptionDialog.<event_handler>
        print("Event handler 'on_ok_btn' not implemented!")
        event.Skip()

# end of class MyFeederOptionDialog

class MyApp(wx.App):
    def OnInit(self):
        self.frame = FeederFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    gettext.install("app") # replace with the appropriate catalog name

    app = MyApp(0)
    app.MainLoop()
